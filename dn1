<!DOCTYPE html>
<html dir="rtl" lang="he">
<head>
    <meta charset="UTF-8">
    <title>מערכת שעות למשאב מחשבים</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <style>
        :root {
            --empty-cell: #e3f2fd;
            --partial-cell: #c8e6c9;
            --full-cell: #ffebee;
            --pending-cell: #fff3e0;
            --approved-color: #dcedc8;
            --primary-color: #2196F3;
            --success-color: #4CAF50;
            --danger-color: #f44336;
            --warning-color: #ff9800;
        }

        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            direction: rtl;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .week-nav {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: center;
            position: relative;
        }

        th {
            background-color: var(--primary-color);
            color: white;
            font-weight: bold;
        }

        .cell-empty { background-color: var(--empty-cell); }
        .cell-partial { background-color: var(--partial-cell); }
        .cell-full { background-color: var(--full-cell); }

        .booking-item {
            border: 1px solid #e0e0e0;
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 4px;
            position: relative;
            background-color: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .booking-item.pending {
            background-color: var(--pending-cell);
            border: 1px solid var(--warning-color);
        }

        .booking-item.approved {
            background-color: var(--approved-color);
            border: 1px solid var(--success-color);
        }

        .status-badge {
            position: absolute;
            top: -10px;
            right: 10px;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .status-badge.pending {
            background-color: var(--warning-color);
            color: white;
            animation: pulse 2s infinite;
        }

        .status-badge.approved {
            background-color: var(--success-color);
            color: white;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.6; }
            100% { opacity: 1; }
        }

        .remaining-computers {
            margin-top: 8px;
            padding: 8px;
            border-radius: 4px;
            font-weight: bold;
            text-align: center;
            color: var(--primary-color);
            background-color: rgba(33, 150, 243, 0.1);
        }

        .booking-form {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            z-index: 1000;
            width: 90%;
            max-width: 500px;
        }

        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
            backdrop-filter: blur(3px);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }

        .form-group select,
        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        .form-group select:focus,
        .form-group input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.1);
        }

        .weekly-status {
            font-size: 0.9em;
            padding: 8px;
            margin-top: 4px;
            border-radius: 4px;
            background-color: #f5f5f5;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
        }

        button:hover:not(:disabled) {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .submit-btn {
            background-color: var(--success-color);
            color: white;
        }

        .cancel-btn {
            background-color: var(--danger-color);
            color: white;
        }

        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255,255,255,0.9);
            z-index: 1001;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            color: var(--primary-color);
            font-size: 18px;
            font-weight: bold;
        }

        .info, .error {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
        }

        .info {
            background-color: #e3f2fd;
            color: #1976d2;
        }

        .error {
            background-color: #ffebee;
            color: #c62828;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="controls">
            <div class="week-nav">
                <button onclick="window.scheduler.changeWeek(-1)">◀ שבוע קודם</button>
                <span id="current-week"></span>
                <button onclick="window.scheduler.changeWeek(1)">שבוע הבא ▶</button>
            </div>
        </div>

        <table id="schedule">
            <thead>
                <tr>
                    <th>שעה</th>
                    <th>ראשון</th>
                    <th>שני</th>
                    <th>שלישי</th>
                    <th>רביעי</th>
                    <th>חמישי</th>
                    <th>שישי</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div class="overlay" id="overlay"></div>
    <div class="booking-form" id="booking-form">
        <h3>הזמנת מחשבים</h3>
        <form id="reservation-form">
            <div class="form-group">
                <label for="teacher">שם המורה:</label>
                <select id="teacher" required></select>
                <div id="teacher-status" class="weekly-status"></div>
            </div>
            <div class="form-group">
                <label for="class">כיתה:</label>
                <select id="class" required></select>
                <div id="class-status" class="weekly-status"></div>
            </div>
            <div class="form-group">
                <label for="subject">מקצוע:</label>
                <input type="text" id="subject" required>
            </div>
            <div class="form-group">
                <label for="computers">מספר מחשבים:</label>
                <input type="number" id="computers" min="1" required>
                <div class="info" id="computers-info"></div>
            </div>
            <input type="hidden" id="selected-date">
            <input type="hidden" id="selected-hour">
            <div class="error" id="error-message"></div>
            <div class="info" id="status-message"></div>
            <button type="submit" class="submit-btn">שמור</button>
            <button type="button" class="cancel-btn" onclick="window.scheduler.closeForm()">ביטול</button>
        </form>
    </div>

    <div class="loading-overlay" id="loading-overlay">
        <div class="spinner"></div>
        <div class="loading-text">טוען נתונים...</div>
    </div>

    <script defer>
document.addEventListener('DOMContentLoaded', function() {
    // Create global scheduler object
    window.scheduler = {
        currentWeek: moment(),
        scheduleData: [],
        teachersList: [],
        classesList: [],
        isLoading: false,

        HOURS_PER_DAY: {
            0: 7, // ראשון
            1: 7, // שני
            2: 5, // שלישי
            3: 7, // רביעי
            4: 7, // חמישי
            5: 4  // שישי
        },

        tempBookingsManager: {
            STORAGE_KEY: 'tempBookings',
            EXPIRY_TIME: 5 * 60 * 1000, // 5 minutes in milliseconds

            getTempBookings() {
                try {
                    const stored = localStorage.getItem(this.STORAGE_KEY);
                    return stored ? JSON.parse(stored) : {};
                } catch {
                    return {};
                }
            },

            setTempBookings(bookings) {
                localStorage.setItem(this.STORAGE_KEY, JSON.stringify(bookings));
            },

            addBooking(booking) {
                const bookings = this.getTempBookings();
                const key = `${booking.תאריך}_${booking['שעה במערכת']}`;

                // Check for existing booking in database
                const existingInDB = window.scheduler.scheduleData.find(b =>
                    b.תאריך === booking.תאריך &&
                    parseInt(b['שעה במערכת']) === parseInt(booking['שעה במערכת']) &&
                    (b['שם המורה'] === booking['שם המורה'] || b['כיתה'] === booking['כיתה'])
                );

                if (existingInDB) {
                    throw new Error('השיעור כבר קיים במערכת');
                }

                const newBooking = {
                    ...booking,
                    createdAt: Date.now(),
                    expiryTime: Date.now() + this.EXPIRY_TIME
                };

                if (!bookings[key]) {
                    bookings[key] = [];
                }

                // Remove any existing booking for same teacher/class
                bookings[key] = bookings[key].filter(b =>
                    b['שם המורה'] !== booking['שם המורה'] &&
                    b['כיתה'] !== booking['כיתה']
                );

                bookings[key].push(newBooking);
                this.setTempBookings(bookings);

                // Set timeout to remove expired booking
                setTimeout(() => {
                    this.removeExpiredBooking(key, newBooking);
                }, this.EXPIRY_TIME);
            },

            removeExpiredBooking(key, booking) {
                const bookings = this.getTempBookings();
                if (bookings[key]) {
                    bookings[key] = bookings[key].filter(b =>
                        b.createdAt !== booking.createdAt
                    );
                    if (bookings[key].length === 0) {
                        delete bookings[key];
                    }
                    this.setTempBookings(bookings);
                    window.scheduler.renderSchedule();
                }
            },

            getValidBookingsForSlot(date, hour) {
      const bookings = this.getTempBookings();
      const key = `${date}_${hour}`;
      const now = Date.now();

      if (!bookings[key]) return [];

      // Get all permanent bookings for this slot
      const permanentBookings = window.scheduler.scheduleData.filter(dbBooking =>
          dbBooking.תאריך === date &&
          parseInt(dbBooking['שעה במערכת']) === parseInt(hour)
      );

      // Calculate total computers from permanent bookings
      const permanentTotal = permanentBookings.reduce((sum, booking) =>
          sum + parseInt(booking['מספר מחשבים'] || 0), 0);

      // Get valid temporary bookings
      const validBookings = bookings[key]
          .filter(booking => booking.expiryTime > now)
          .sort((a, b) => a.createdAt - b.createdAt); // Sort by creation time

      // Check remaining computer capacity
      let remainingComputers = 20 - permanentTotal;
      const acceptedTempBookings = [];

      for (const booking of validBookings) {
          const bookingComputers = parseInt(booking['מספר מחשבים'] || 0);
          if (remainingComputers >= bookingComputers) {
              acceptedTempBookings.push(booking);
              remainingComputers -= bookingComputers;
          }
      }

      // Update storage if needed
      if (acceptedTempBookings.length !== bookings[key].length) {
          if (acceptedTempBookings.length === 0) {
              delete bookings[key];
          } else {
              bookings[key] = acceptedTempBookings;
          }
          this.setTempBookings(bookings);
      }

      return acceptedTempBookings;
  },

            cleanExpiredBookings() {
                const bookings = this.getTempBookings();
                const now = Date.now();
                let hasChanges = false;

                Object.keys(bookings).forEach(key => {
                    const validBookings = bookings[key].filter(booking => {
                        if (booking.expiryTime <= now) return false;

                        // Also check for conflicts with database
                        const [date, hour] = key.split('_');
                        return !window.scheduler.scheduleData.some(dbBooking =>
                            dbBooking.תאריך === date &&
                            parseInt(dbBooking['שעה במערכת']) === parseInt(hour) &&
                            (dbBooking['שם המורה'] === booking['שם המורה'] ||
                             dbBooking['כיתה'] === booking['כיתה'])
                        );
                    });

                    if (validBookings.length !== bookings[key].length) {
                        hasChanges = true;
                        if (validBookings.length === 0) {
                            delete bookings[key];
                        } else {
                            bookings[key] = validBookings;
                        }
                    }
                });

                if (hasChanges) {
                    this.setTempBookings(bookings);
                    window.scheduler.renderSchedule();
                }
            }
        },

        // Main functions
        async loadData(isInitial = false) {
            this.showLoading();
            try {
                if (isInitial) {
                    await Promise.all([
                        this.loadTeachers(),
                        this.loadClasses()
                    ]);
                }
                await this.loadSchedule();
                this.tempBookingsManager.cleanExpiredBookings();
                await this.delay(500);
            } catch (error) {
                console.error('Error loading data:', error);
                alert('אירעה שגיאה בטעינת הנתונים. אנא רענן את הדף.');
            } finally {
                this.hideLoading();
            }
        },

        async loadSchedule() {
           const timestamp = Date.now();
           const response = await fetch(
               `https://docs.google.com/spreadsheets/d/e/2PACX-1vSIUMj2f-3f_tSaBBAfAlw454-eQUD2q9E1LSIFldqyeYh1T2sZ_VQ5yCwhoURcPuiZslDaEqVJR6B2/pub?output=csv&timestamp=${timestamp}`,
               {
                   cache: 'no-store',
                   headers: {
                       'Cache-Control': 'no-cache, no-store, must-revalidate',
                       'Pragma': 'no-cache'
                   }
               }
           );
           const csvText = await response.text();
           this.scheduleData = this.parseCSV(csvText);
           // Sort by date and time to ensure consistent ordering
           this.scheduleData.sort((a, b) => {
               const dateCompare = a.תאריך.localeCompare(b.תאריך);
               if (dateCompare !== 0) return dateCompare;
               return parseInt(a['שעה במערכת']) - parseInt(b['שעה במערכת']);
           });
           this.renderSchedule();
       },

       async loadTeachers() {
           const response = await fetch(
               'https://docs.google.com/spreadsheets/d/e/2PACX-1vQUvRHe90lOs14oPNfL3uRqN73uEgmg7L_ON2gXnCD-CuZ_FmTZDRb-rxmmZmeq4frFxh-IMcGLEfy-/pub?output=csv',
               { cache: 'no-store' }
           );
           const csvText = await response.text();
           this.teachersList = this.parseList(csvText);
           this.populateSelect('teacher', this.teachersList);
       },

       async loadClasses() {
           const response = await fetch(
               'https://docs.google.com/spreadsheets/d/e/2PACX-1vT1t6xbHD1i8uWUFQb5MmaHbjjyOLhcCdxs26f0nIABkNoGULEia-mfdsS78KlLNeZdtJ31XQEdi70C/pub?gid=0&single=true&output=csv',
               { cache: 'no-store' }
           );
           const csvText = await response.text();
           this.classesList = this.parseList(csvText);
           this.populateSelect('class', this.classesList);
       },

       // Helper functions
       getAllBookings(date, hour) {
     // Get permanent bookings, sorted by the order they appear in the database
     const permanentBookings = this.scheduleData
         .filter(booking =>
             booking['תאריך'] === date &&
             parseInt(booking['שעה במערכת']) === hour
         )
         .map((booking, index) => ({
             ...booking,
             status: 'approved',
             originalIndex: index
         }))
         .sort((a, b) => a.originalIndex - b.originalIndex);

     // Get temporary bookings that don't conflict with permanent ones
     const tempBookings = this.tempBookingsManager.getValidBookingsForSlot(date, hour)
         .map(booking => ({
             ...booking,
             status: 'pending'
         }));

     // Combine permanent and temporary bookings
     let allBookings = [...permanentBookings, ...tempBookings];

     // If total computers is less than or equal to 20, return all bookings
     const totalComputers = allBookings.reduce((sum, booking) => sum + parseInt(booking['מספר מחשבים'] || 0), 0);
     if (totalComputers <= 20) {
         return allBookings;
     }

     // If total computers exceeds 20, keep only the first bookings until the limit is reached
     let currentTotal = 0;
     return allBookings.filter(booking => {
         const bookingComputers = parseInt(booking['מספר מחשבים'] || 0);
         if (currentTotal + bookingComputers <= 20) {
             currentTotal += bookingComputers;
             return true;
         }
         return false;
     });
 },
       getTotalComputers(bookings) {
           return bookings.reduce((sum, booking) =>
               sum + parseInt(booking['מספר מחשבים'] || 0), 0
           );
       },

       countWeeklyBookings(field, value, weekStart) {
           if (!value) return 0;

           const weekEnd = weekStart.clone().endOf('week');

           // Count permanent bookings
           const permanentCount = this.scheduleData.filter(booking => {
               const bookingDate = moment(booking['תאריך']);
               return booking[field] === value &&
                      bookingDate.isBetween(weekStart, weekEnd, 'day', '[]');
           }).length;

           // Count temporary bookings
           const tempCount = Object.values(this.tempBookingsManager.getTempBookings())
               .flat()
               .filter(booking => {
                   const bookingDate = moment(booking['תאריך']);
                   return booking[field] === value &&
                          bookingDate.isBetween(weekStart, weekEnd, 'day', '[]');
               }).length;

           return permanentCount + tempCount;
       },

       // UI Related functions
       renderSchedule() {
           const tbody = document.querySelector('#schedule tbody');
           tbody.innerHTML = '';

           const startOfWeek = this.currentWeek.clone().startOf('week');
           document.getElementById('current-week').textContent =
               `${startOfWeek.format('DD/MM/YYYY')} - ${startOfWeek.clone().endOf('week').format('DD/MM/YYYY')}`;

           for (let hour = 1; hour <= 7; hour++) {
               const row = document.createElement('tr');

               const hourCell = document.createElement('td');
               hourCell.textContent = `שעה ${hour}`;
               hourCell.style.fontWeight = 'bold';
               row.appendChild(hourCell);

               for (let day = 0; day < 6; day++) {
                   if (hour <= this.HOURS_PER_DAY[day]) {
                       const cell = document.createElement('td');
                       const date = startOfWeek.clone().add(day, 'days').format('YYYY-MM-DD');
                       const bookings = this.getAllBookings(date, hour);
                       const totalComputers = this.getTotalComputers(bookings);

                       cell.className = this.getCellClass(totalComputers);

                       let cellContent = '';
                       bookings.forEach(booking => {
                           const statusText = booking.status === 'pending' ? 'בבדיקת זמינות' : 'מאושר';
                           const statusClass = booking.status === 'pending' ? 'pending' : 'approved';

                           cellContent += `
                               <div class="booking-item ${statusClass}">
                                   <div class="status-badge ${statusClass}">${statusText}</div>
                                   <strong>${booking['שם המורה']}</strong><br>
                                   כיתה: ${booking['כיתה']}<br>
                                   ${booking['מקצוע']}<br>
                                   מחשבים: ${booking['מספר מחשבים']}
                               </div>
                           `;
                       });

                       if (totalComputers < 20) {
                           cellContent += `
                               <div class="remaining-computers">
                                   נותרו ${20 - totalComputers} מחשבים
                               </div>
                           `;
                           cell.onclick = () => this.openBookingForm(date, hour);
                           cell.style.cursor = 'pointer';
                       }

                       cell.innerHTML = cellContent;
                       row.appendChild(cell);
                   } else {
                       const emptyCell = document.createElement('td');
                       emptyCell.style.backgroundColor = '#eee';
                       row.appendChild(emptyCell);
                   }
               }
               tbody.appendChild(row);
           }
       },
       // Form and UI operations
changeWeek(delta) {
    const newWeek = this.currentWeek.clone().add(delta, 'weeks');
    const today = moment();
    const maxDate = today.clone().add(4, 'weeks').endOf('week');

    if (delta > 0) {
        if (newWeek.startOf('week').isAfter(maxDate)) {
            alert('לא ניתן להזמין יותר מ-4 שבועות מראש');
            return;
        }
    } else if (delta < 0) {
        if (newWeek.startOf('week').isBefore(today.startOf('week'))) {
            alert('לא ניתן להזמין בתאריך שעבר');
            return;
        }
    }

    this.currentWeek = newWeek;
    this.renderSchedule();
},

async openBookingForm(date, hour) {
    await this.loadSchedule();

    const bookings = this.getAllBookings(date, hour);
    const totalComputers = this.getTotalComputers(bookings);

    if (totalComputers >= 20) {
        alert('התא כבר מלא. אנא בחר תא אחר.');
        return;
    }

    document.getElementById('selected-date').value = date;
    document.getElementById('selected-hour').value = hour;
    document.getElementById('error-message').textContent = '';
    document.getElementById('status-message').textContent = '';
    document.getElementById('reservation-form').reset();

    this.updateComputersLimit(date, hour);
    this.updateWeeklyStatusForTeacher();
    this.updateWeeklyStatusForClass();

    document.getElementById('overlay').style.display = 'block';
    document.getElementById('booking-form').style.display = 'block';
},

closeForm() {
    document.getElementById('overlay').style.display = 'none';
    document.getElementById('booking-form').style.display = 'none';
    document.getElementById('error-message').textContent = '';
    document.getElementById('status-message').textContent = '';
    document.getElementById('computers-info').textContent = '';
    document.getElementById('teacher-status').textContent = '';
    document.getElementById('class-status').textContent = '';
},

updateComputersLimit(date, hour) {
    const bookings = this.getAllBookings(date, hour);
    const totalComputers = this.getTotalComputers(bookings);
    const remainingComputers = 20 - totalComputers;

    const computersInput = document.getElementById('computers');
    const computersInfo = document.getElementById('computers-info');

    computersInput.max = remainingComputers;
    computersInput.value = Math.min(computersInput.value || 1, remainingComputers);
    computersInfo.textContent = `ניתן להזמין עד ${remainingComputers} מחשבים`;
},

updateWeeklyStatusForTeacher() {
    const teacher = document.getElementById('teacher').value;
    const date = document.getElementById('selected-date').value;
    const weekStart = moment(date).startOf('week');
    const teacherBookings = this.countWeeklyBookings('שם המורה', teacher, weekStart);

    const statusElement = document.getElementById('teacher-status');
    if (teacher) {
        statusElement.textContent = `שיעורים השבוע: ${teacherBookings}/4`;
        statusElement.style.color = teacherBookings >= 4 ? 'red' : 'initial';
    } else {
        statusElement.textContent = '';
    }
},

updateWeeklyStatusForClass() {
    const className = document.getElementById('class').value;
    const date = document.getElementById('selected-date').value;
    const weekStart = moment(date).startOf('week');
    const classBookings = this.countWeeklyBookings('כיתה', className, weekStart);

    const statusElement = document.getElementById('class-status');
    if (className) {
        statusElement.textContent = `שיעורים השבוע: ${classBookings}/4`;
        statusElement.style.color = classBookings >= 4 ? 'red' : 'initial';
    } else {
        statusElement.textContent = '';
    }
},

// Utility functions
getCellClass(totalComputers) {
    if (totalComputers === 0) return 'cell-empty';
    if (totalComputers === 20) return 'cell-full';
    return 'cell-partial';
},

showLoading() {
    this.isLoading = true;
    document.getElementById('loading-overlay').style.display = 'flex';
},

hideLoading() {
    this.isLoading = false;
    document.getElementById('loading-overlay').style.display = 'none';
},

async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
},

parseCSV(csv) {
    const lines = csv.split('\n');
    const headers = lines[0].split(',').map(h => h.trim());
    return lines.slice(1)
        .map(line => {
            const values = line.split(',').map(v => v.trim());
            const entry = {};
            headers.forEach((header, i) => {
                entry[header] = values[i];
            });
            return entry;
        })
        .filter(entry => entry['שם המורה'] && entry['תאריך']);
},

parseList(csv) {
    return csv.split('\n')
        .map(line => line.split(',')[0].trim())
        .filter(item => item && item !== 'null' && item !== '');
},

populateSelect(id, items) {
    const select = document.getElementById(id);
    select.innerHTML = `<option value="">בחר/י ${id === 'teacher' ? 'מורה' : 'כיתה'}</option>`;
    items.forEach(item => {
        const option = document.createElement('option');
        option.value = item;
        option.textContent = item;
        select.appendChild(option);
    });
},

// Initialize event listeners
initEventListeners() {
    document.getElementById('teacher').addEventListener('change', () => this.updateWeeklyStatusForTeacher());
    document.getElementById('class').addEventListener('change', () => this.updateWeeklyStatusForClass());

    document.getElementById('computers').addEventListener('input', function(e) {
        const max = parseInt(this.max);
        const value = parseInt(this.value);

        if (value > max) {
            this.value = max;
        } else if (value < 1) {
            this.value = 1;
        }
    });

    document.getElementById('reservation-form').onsubmit = async (e) => {
        e.preventDefault();
        await this.handleFormSubmit(e);
    };

    // Storage Event Listener
    window.addEventListener('storage', (e) => {
        if (e.key === this.tempBookingsManager.STORAGE_KEY) {
            this.renderSchedule();
        }
    });
},

async handleFormSubmit(e) {
    const teacher = document.getElementById('teacher').value;
    const className = document.getElementById('class').value;
    const date = document.getElementById('selected-date').value;
    const hour = document.getElementById('selected-hour').value;
    const subject = document.getElementById('subject').value;
    const computers = parseInt(document.getElementById('computers').value);

    await this.loadSchedule();

    const weekStart = moment(date).startOf('week');
    const teacherBookings = this.countWeeklyBookings('שם המורה', teacher, weekStart);
    const classBookings = this.countWeeklyBookings('כיתה', className, weekStart);

    if (teacherBookings >= 4) {
        document.getElementById('error-message').textContent = 'למורה כבר יש 4 שיעורים השבוע';
        return;
    }

    if (classBookings >= 4) {
        document.getElementById('error-message').textContent = 'לכיתה כבר יש 4 שיעורים השבוע';
        return;
    }

    const bookings = this.getAllBookings(date, parseInt(hour));
    const totalComputers = this.getTotalComputers(bookings);

    if (totalComputers + computers > 20) {
        document.getElementById('error-message').textContent = 'מספר המחשבים המבוקש עולה על הכמות הפנויה';
        return;
    }

    this.showLoading();
    try {
        const formData = new FormData();
        formData.append('entry.1323321977', teacher);
        formData.append('entry.1450687623', className);
        formData.append('entry.1431651377', date);
        formData.append('entry.1887686014', hour);
        formData.append('entry.1869424962', subject);
        formData.append('entry.2087001113', computers);

        const tempBooking = {
            'שם המורה': teacher,
            'כיתה': className,
            'תאריך': date,
            'שעה במערכת': hour,
            'מקצוע': subject,
            'מספר מחשבים': computers
        };

        this.tempBookingsManager.addBooking(tempBooking);
        this.renderSchedule();

        await fetch('https://docs.google.com/forms/d/1e2M8G_91X9dMbgPahoh7VWMMU9ITKxo_wWMpAEmHTp4/formResponse', {
            method: 'POST',
            body: formData,
            mode: 'no-cors'
        });

        this.closeForm();
    } catch (error) {
        document.getElementById('error-message').textContent = 'אירעה שגיאה בשמירת ההזמנה';
    } finally {
        this.hideLoading();
    }
}
};

// Initialize the scheduler
window.scheduler.initEventListeners();
window.scheduler.loadData(true);
setInterval(() => window.scheduler.loadData(), 60000);
});
</script>

</body>
</html>
